type VestingType = 
 variant {
   Single;
   Standard;
 };
type TokenInfo = 
 record {
   canisterId: text;
   decimals: nat;
   fee: nat;
   name: text;
   standard: text;
   symbol: text;
 };
type Time = int;
type Result_1 = 
 variant {
   err: text;
   ok: nat;
 };
type Result = 
 variant {
   err: text;
   ok: bool;
 };
type Recipient__1 = 
 record {
   amount: nat;
   note: opt text;
   "principal": principal;
 };
type RecipientClaimInfo = 
 record {
   claimHistory: vec ClaimRecord;
   claimInterval: nat;
   claimedAmount: nat;
   lastClaimedTime: Time;
   recipient: Recipient__1;
   remainingAmount: nat;
   vestingCliff: nat;
   vestingDuration: nat;
 };
type RecipientClaim = 
 record {
   claimInterval: nat;
   claimedAmount: nat;
   lastClaimedTime: Time;
   recipient: Recipient__1;
   remainingAmount: nat;
   vestingCliff: nat;
   vestingDuration: nat;
 };
type Recipient = 
 record {
   address: text;
   amount: nat;
   note: opt text;
 };
type DistributionType = 
 variant {
   Public;
   Whitelist;
 };
type ContractStatus = 
 variant {
   CANCELED;
   ENDED;
   NOT_STARTED;
   PAUSED;
   PENDING;
   STARTED;
 };
type ContractData = 
 record {
   allowCancel: bool;
   allowTransfer: bool;
   autoTransfer: bool;
   blockId: nat;
   cliffTime: nat;
   cliffUnit: nat;
   created: Time;
   cyclesBalance: nat;
   description: text;
   distributionType: DistributionType;
   durationTime: nat;
   durationUnit: nat;
   initialUnlockPercentage: nat;
   isCanceled: bool;
   isPaused: bool;
   isStarted: bool;
   lockDuration: nat;
   maxRecipients: nat;
   owner: principal;
   requiredScore: nat;
   startNow: bool;
   startTime: Time;
   status: ContractStatus;
   title: text;
   tokenInfo: TokenInfo;
   tokenPerRecipient: nat;
   totalAmount: nat;
   totalClaimedAmount: nat;
   totalRecipients: nat;
   unlockSchedule: nat;
   vestingType: VestingType;
 };
type Contract = 
 service {
   addRecipient: (principal, nat, nat, nat, nat) -> (Result);
   cancelTimer: () -> ();
   checkClaimable: (principal) -> (nat) query;
   checkEligibility: () -> (Result);
   claim: () -> (Result_1);
   getClaimHistory: (principal) -> (opt vec ClaimRecord) query;
   getContractInfo: () -> (ContractData) query;
   getCounter: () -> (nat) query;
   getRecipientClaimInfo: (principal) -> (opt RecipientClaimInfo) query;
   getRecipients: (nat) -> (vec RecipientClaim) query;
   getTimePeriod: () -> (nat) query;
   init: () -> ();
   setRequiredScore: (nat) -> (Result);
   startContract: () -> (Result);
   transferOwnership: (principal) -> (Result);
 };
type ClaimRecord = 
 record {
   amount: nat;
   claimedAt: Time;
   txId: nat;
 };
service : (record {
             allowCancel: bool;
             autoTransfer: bool;
             blockId: nat;
             cliffTime: nat;
             cliffUnit: nat;
             created: Time;
             description: text;
             distributionType: DistributionType;
             durationTime: nat;
             durationUnit: nat;
             initialUnlockPercentage: nat;
             maxRecipients: nat;
             owner: principal;
             recipients: opt vec Recipient;
             startNow: bool;
             startTime: nat;
             title: text;
             tokenInfo: TokenInfo;
             totalAmount: nat;
             unlockSchedule: nat;
             vestingType: VestingType;
           }) -> Contract
