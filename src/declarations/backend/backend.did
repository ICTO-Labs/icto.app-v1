type canister_id = principal;
type TimerId = nat;
type Time = int;
type Recipient = 
 record {
   address: text;
   amount: nat;
   note: opt text;
   title: opt text;
 };
type ContractData = 
 record {
   canCancel: text;
   canChange: text;
   canView: text;
   durationTime: nat;
   durationUnit: nat;
   name: text;
   recipients: vec Recipient;
   startNow: bool;
   startTime: Time;
   tokenId: text;
   tokenName: text;
   tokenStandard: text;
   totalAmount: nat;
   unlockSchedule: nat;
 };
type CanisterStatus = 
 record {
   cycles: nat;
   freezing_threshold: nat;
   memory_size: nat;
   module_hash: opt vec nat8;
   settings: CanisterSettings;
   status: variant {
             running;
             stopped;
             stopping;
           };
 };
type CanisterSettings = 
 record {
   compute_allocation: nat;
   controllers: vec principal;
   freezing_threshold: nat;
   memory_allocation: nat;
 };
service : {
  cancel: () -> ();
  cancelContract: (principal) -> ();
  canister_status: (canister_id) -> (CanisterStatus);
  createContract: (ContractData) -> (text);
  getValue: () -> (nat) query;
  get_cron_id: () -> (TimerId) query;
  increment: () -> ();
  listContract: () -> (vec text) query;
  whoami: () -> (principal);
}
