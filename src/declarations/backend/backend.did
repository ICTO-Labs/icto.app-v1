type canister_id = principal;
type VestingType = 
 variant {
   Single;
   Standard;
 };
type TokenInfo = 
 record {
   canisterId: text;
   decimals: nat;
   fee: nat;
   name: text;
   standard: text;
   symbol: text;
 };
type Time = int;
type Result = 
 variant {
   err: text;
   ok: principal;
 };
type Recipient = 
 record {
   address: text;
   amount: nat;
   note: opt text;
 };
type DistributionType__1 = 
 variant {
   Public;
   Whitelist;
 };
type DistributionType = 
 variant {
   Public;
   Whitelist;
 };
type ContractMetadata = 
 record {
   createdAt: int;
   distributionType: DistributionType;
   id: text;
   owner: text;
 };
type ContractData = 
 record {
   allowCancel: bool;
   autoTransfer: bool;
   blockId: nat;
   cliffTime: nat;
   cliffUnit: nat;
   created: Time;
   description: text;
   distributionType: DistributionType__1;
   durationTime: nat;
   durationUnit: nat;
   initialUnlockPercentage: nat;
   maxRecipients: nat;
   owner: principal;
   recipients: opt vec Recipient;
   startNow: bool;
   startTime: nat;
   title: text;
   tokenInfo: TokenInfo;
   totalAmount: nat;
   unlockSchedule: nat;
   vestingType: VestingType;
 };
type CanisterStatus = 
 record {
   cycles: nat;
   freezing_threshold: nat;
   memory_size: nat;
   module_hash: opt vec nat8;
   settings: CanisterSettings;
   status: variant {
             running;
             stopped;
             stopping;
           };
 };
type CanisterSettings = 
 record {
   compute_allocation: nat;
   controllers: vec principal;
   freezing_threshold: nat;
   memory_allocation: nat;
 };
service : {
  addAdmin: (text) -> ();
  addController: (canister_id, vec principal) -> ();
  cancelContract: (principal) -> ();
  canister_status: (canister_id) -> (CanisterStatus);
  createContract: (ContractData) -> (Result);
  getAdmins: () -> (vec text) query;
  getAllContracts: () -> (vec ContractMetadata) query;
  getContractMetadata: (text) -> (opt ContractMetadata) query;
  getContractsByWallet: () ->
   (record {
      privateContracts: vec text;
      publicContracts: vec text;
    }) query;
  getMyContracts: () -> (vec ContractMetadata);
  getPrivateContracts: (text) -> (vec text) query;
  removeAdmin: (text) -> ();
  whoami: () -> (principal);
}
