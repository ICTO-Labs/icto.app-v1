type canister_id = principal;
type TokenInfo = 
 record {
   canisterId: text;
   decimals: nat;
   fees: nat;
   name: text;
   standard: text;
   symbol: text;
 };
type Time = int;
type Recipient = 
 record {
   address: text;
   amount: nat;
   note: opt text;
 };
type ContractData = 
 record {
   canCancel: text;
   canChange: text;
   canView: text;
   cliffTime: nat;
   cliffUnit: nat;
   created: Time;
   description: text;
   durationTime: nat;
   durationUnit: nat;
   owner: principal;
   recipients: vec Recipient;
   startNow: bool;
   startTime: Time;
   title: text;
   tokenInfo: TokenInfo;
   totalAmount: nat;
   unlockSchedule: nat;
   unlockedAmount: nat;
 };
type CanisterStatus = 
 record {
   cycles: nat;
   freezing_threshold: nat;
   memory_size: nat;
   module_hash: opt vec nat8;
   settings: CanisterSettings;
   status: variant {
             running;
             stopped;
             stopping;
           };
 };
type CanisterSettings = 
 record {
   compute_allocation: nat;
   controllers: vec principal;
   freezing_threshold: nat;
   memory_allocation: nat;
 };
service : {
  addAdmin: (text) -> ();
  addController: (canister_id, vec principal) -> ();
  cancelContract: (principal) -> ();
  canister_status: (canister_id) -> (CanisterStatus);
  createContract: (ContractData) -> (text);
  getAdmins: () -> (vec text) query;
  removeAdmin: (text) -> ();
  updateIndexingCanister: (text) -> ();
  whoami: () -> (principal);
}
