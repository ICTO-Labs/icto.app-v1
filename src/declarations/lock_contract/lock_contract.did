type TransferRecord = 
 record {
   from: text;
   method: text;
   positionId: nat;
   time: Time;
   to: text;
 };
type TokenInfo = 
 record {
   address: text;
   name: text;
   standard: text;
 };
type Time = int;
type Result = 
 variant {
   err: text;
   ok: bool;
 };
type LockContract = 
 record {
   contractId: opt text;
   created: Time;
   durationTime: nat;
   durationUnit: nat;
   lockedTime: opt Time;
   meta: vec text;
   poolId: text;
   poolName: text;
   positionId: nat;
   positionOwner: principal;
   provider: text;
   status: text;
   token0: TokenInfo;
   token1: TokenInfo;
   unlockedTime: opt Time;
   version: text;
   withdrawnTime: opt Time;
 };
type Contract = 
 service {
   cycleBalance: () -> (nat) query;
   fallback_send: (principal, nat) -> (Result);
   getContract: () -> (LockContract) query;
   getDeployer: () -> (principal) query;
   getInitContract: () -> (LockContract) query;
   getLockedPosition: () -> (nat) query;
   getTransactions: () -> (vec record {
                                 text;
                                 TransferRecord;
                               }) query;
   getVersion: () -> (text) query;
   increaseDuration: (nat, nat) -> (Result);
   verify: () -> (Result);
   withdraw: () -> (Result);
 };
service : (LockContract) -> Contract
