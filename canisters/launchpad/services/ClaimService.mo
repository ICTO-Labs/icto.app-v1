import BackendDeployer "canister:backend";
import Result "mo:base/Result";
import Principal "mo:base/Principal";
import Types "../types/Common";

actor class ClaimService() = self {
    private func prepairInitArgs(distribution: Types.Distribution, tokenInfo: Types.TokenInfo, launchpadId: Principal, launchpadTitle: Text, distributionType: Text): ClaimDeployer.CreateContractArgs {
        let _recipients = if(distribution.recipients.size() > 0){
            distribution.recipients.map(func(recipient: Types.Recipient): Types.Recipient = {
                address = recipient.address;
                amount = recipient.amount;
                note = recipient.note;
            })
        };

        {
            title = distributionType # " distribution, " # launchpadTitle;
            description = "This contract is for " # distributionType # " distribution, auto generated by launchpad: " # launchpadTitle;
            durationTime = distribution.durationTime;
            durationUnit = distribution.durationUnit;
            cliffTime = distribution.cliffTime;
            cliffUnit = distribution.cliffUnit;
            unlockSchedule = distribution.unlockSchedule;
            initialUnlockPercentage = distribution.initialUnlockPercentage;
            maxRecipients = 0;
            blockId = 0;
            totalAmount = distribution.total;
            distributionType = #Whitelist;
            vestingType = #Standard;
            autoTransfer = false;
            tokenInfo = tokenInfo;
            launchpadId = launchpadId;
            recipients = _recipients;
        }
    };

    public func createContract(distribution: Types.Distribution, tokenInfo: Types.TokenInfo, launchpadId: Principal, launchpadTitle: Text, distributionType: Text): async Result.Result<Principal, Text> {
        let args = prepairInitArgs(distribution, tokenInfo, launchpadId, launchpadTitle, distributionType);
        await BackendDeployer.createContract(args);
    }
}